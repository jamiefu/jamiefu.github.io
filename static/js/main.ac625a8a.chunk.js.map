{"version":3,"sources":["components/About.js","App.js","serviceWorker.js","index.js"],"names":["About","class","src","href","Component","App","props","path","Writing","Doings","Pecularities","Menu","type","id","for","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2SA2CiBA,G,mLArCX,OACE,yBAAKC,MAAM,SACP,yBAAKA,MAAM,SACP,yBAAKA,MAAM,WACP,yBAAKC,IAAI,aAEb,yBAAKD,MAAM,SACP,iTAQR,6BACI,yBAAKA,MAAM,SACP,+WAKA,4SAKA,6DACmC,uBAAGE,KAAK,eAAR,WADnC,gCACiG,uBAAGA,KAAK,2BAAR,aADjG,KACkJ,uBAAGA,KAAK,eAAR,0BADlJ,SACwM,uBAAGA,KAAK,iCAAR,eADxM,4H,GA7BAC,cCQdC,E,kDACJ,WAAYC,GAAQ,uCACZA,G,qDAKN,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,YACV,kBAACC,EAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,WACV,kBAACE,EAAD,OAEF,kBAAC,IAAD,CAAOF,KAAK,kBACV,kBAACG,EAAD,OAEF,kBAAC,IAAD,CAAOH,KAAK,KACV,kBAAC,EAAD,a,GArBMH,aA6BZO,E,uKAEF,OACE,yBAAKV,MAAM,aACT,6BACE,2BAAOW,KAAK,WAAWC,GAAG,MAAMZ,MAAM,WACtC,2BAAOa,IAAI,MAAMb,MAAM,WACrB,4BACA,4BACA,6BAEF,yBAAKA,MAAM,MACT,uBAAGE,KAAK,KAAR,aAEF,yBAAKF,MAAM,eACT,4BACE,4BAAI,uBAAGE,KAAK,WAAR,kBACJ,4BAAI,uBAAGA,KAAK,YAAR,YACJ,4BAAI,uBAAGA,KAAK,kBAAR,yB,GAlBCC,aA6BnB,SAASI,IACP,OACE,wCAMJ,SAASC,IACP,OACE,8CAMJ,SAASC,IACP,OACE,6CAMWL,QClFKU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ac625a8a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport './About.css';\n\nclass About extends Component {\n    render() {\n      return (\n        <div class=\"about\">\n            <div class=\"itsme\">\n                <div class=\"picture\">\n                    <img src=\"/me.jpg\" />\n                </div>\n                <div class=\"blurb\">\n                    <p>\n                        Hi, I'm Jamie! I'm a rising sophomore studying Computer Science and Finance at MIT on the lookout \n                        for new experiences and skills. \n                        I'm always ponderering about ways to make real and positive differences in the lives of people around me, \n                        and about what it means to be happy.\n                    </p>\n                </div>\n            </div>\n            <div>\n                <div class=\"intro\">\n                    <p> \n                        This summer I'm working with Prof. Max Tegmark to detect news bias with natural language processing (NLP) \n                        and continuing my work with Camera Culture at the MIT Media Lab on the split learning ML methodology. \n                        I'll also be working on some startups with friends, along with some of my own personal projects, so be on the lookout for those! \n                    </p>\n                    <p>\n                        I'm always willing to talk about all things machine learning, but these days I'm also interested in exploring and learning \n                        more about consulting and trading. I've been trying to read and write more as well, to better understand my role \n                        in today's ever-evolving society. \n                    </p>\n                    <p>\n                        On campus I am the director of <a href=\"hackmit.org\">HackMIT</a>, and am heavily involved in <a href=\"http://startup.mit.edu/\">StartLabs</a>, <a href=\"wbl.mit.edu\">Women Business Leaders</a>, and <a href=\"http://www.mitclubtennis.com/\">Club Tennis</a>. \n                        In my spare time you can find me trying to learn how to play the guitar, playing cards, or taking nature walks. \n                    </p>\n                </div>\n            </div>\n        </div>\n      );\n    } \n  }\n  export default About;","import React, { Component } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport './App.css';\n\nimport About from \"./components/About.js\"\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n  }\n\n  render() {\n    return (\n      <Router>\n        <Menu />\n        <Switch>\n          <Route path=\"/writing\">\n            <Writing />\n          </Route>\n          <Route path=\"/doings\">\n            <Doings />\n          </Route>\n          <Route path=\"/peculiarities\">\n            <Pecularities />\n          </Route>\n          <Route path=\"/\">\n            <About />\n          </Route>\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nclass Menu extends Component {\n  render() {\n    return (\n      <div class=\"container\">\n        <nav>\n          <input type=\"checkbox\" id=\"nav\" class=\"hidden\"></input>\n          <label for=\"nav\" class=\"nav-btn\">\n            <i></i>\n            <i></i>\n            <i></i>\n          </label>\n          <div class=\"me\">\n            <a href=\"/\">Jamie Fu</a>\n          </div>\n          <div class=\"nav-wrapper\">\n            <ul>\n              <li><a href=\"/doings\">Doing & Dones</a></li>\n              <li><a href=\"/writing\">Writing</a></li>\n              <li><a href=\"/peculiarities\">Pecularities</a></li>\n            </ul>\n          </div>\n        </nav>\n      </div>\n    );\n  }\n}\n\n\n\nfunction Writing() {\n  return (\n    <div>\n      Writing\n    </div>\n  );\n}\n\nfunction Doings() {\n  return (\n    <div>\n      Doing & Dones\n    </div>\n  );\n}\n\nfunction Pecularities() {\n  return (\n    <div>\n      Pecularities\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}